from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command, StateFilter

from telegram_bot.bot_config import CHECK_EMOJI, YES_EMOJI, START_EMOJI
from telegram_bot.bot_v4.start_handlers import MenuStates

study_router = Router()


@study_router.message(Command('info'))
async def test_sample(message: Message, state: FSMContext):
    await state.set_state(MenuStates.study)

    msg = (
        "<b>üéì –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:</b>\n\n"
        "1. <b>–î–∏–∑–∞–π–Ω –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</b> ‚Äî —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã!\n"
        "2. <b>–í–æ–¥–æ–ª–∞–∑–Ω–æ–µ –¥–µ–ª–æ</b> (<i>–ø–æ–≤—ã—à–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏</i>) ‚Äî –ø–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!\n\n"
        "<tg-spoiler>üì¢ –ù–æ–≤—ã–µ –∫—É—Ä—Å—ã —Å—Ç–∞—Ä—Ç—É—é—Ç —Å–∫–æ—Ä–æ!</tg-spoiler>"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üé® –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –¥–∏–∑–∞–π–Ω–µ", callback_data="design_details"),
            InlineKeyboardButton(text="ü§ø –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–æ–¥–æ–ª–∞–∑–Ω–æ–º –¥–µ–ª–µ", callback_data="diving_details"),
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back"),
            InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data="contact_us"),
        ],
    ])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        msg,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard,
    )


@study_router.callback_query(F.data == "STUDY")
@study_router.callback_query(MenuStates.study, F.data == "go_back")
async def test_sample_callback(callback: CallbackQuery, state: FSMContext):
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å
    await callback.answer()
    await state.set_state(MenuStates.study)
    data = await state.get_data()
    last_message = data.get("last_message")

    if last_message:  # –°–±—Ä–æ—Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–º–µ—Ç–∫–∞ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ
        message_id = last_message.get("id")
        text = last_message.get("text")
        text += f"\n\n{YES_EMOJI}\t–ú–æ–∏ –ö—É—Ä—Å—ã"
        try:
            await callback.message.bot.edit_message_text(text=text, chat_id=callback.message.chat.id,
                                                         message_id=message_id, reply_markup=None,
                                                         parse_mode=ParseMode.HTML)
        except TelegramBadRequest:
            pass

    msg = (
        "<b>üéì –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:</b>\n\n"
        "1. <b>–î–∏–∑–∞–π–Ω –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</b> ‚Äî —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã!\n"
        "2. <b>–í–æ–¥–æ–ª–∞–∑–Ω–æ–µ –¥–µ–ª–æ</b> (<i>–ø–æ–≤—ã—à–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏</i>) ‚Äî –ø–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!\n\n"
        "<tg-spoiler>üì¢ –ù–æ–≤—ã–µ –∫—É—Ä—Å—ã —Å—Ç–∞—Ä—Ç—É—é—Ç —Å–∫–æ—Ä–æ!</tg-spoiler>"
    )

    answer_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üé® –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –¥–∏–∑–∞–π–Ω–µ", callback_data="design_details"),
            InlineKeyboardButton(text="ü§ø –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–æ–¥–æ–ª–∞–∑–Ω–æ–º –¥–µ–ª–µ", callback_data="diving_details"),
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back"),
            InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data="contact_us"),
        ],
    ])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    answer_message = await callback.message.answer(
        msg,
        parse_mode=ParseMode.HTML,
        reply_markup=answer_keyboard,
    )
    await state.update_data(last_message={
        "id": answer_message.message_id,
        "text": msg,
        "keyboard": answer_keyboard.model_dump_json()
    })


@study_router.callback_query(MenuStates.study, F.data == "design_details")
async def handle_diving_details(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    last_message = data.get("last_message")

    if last_message:  # –°–±—Ä–æ—Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–º–µ—Ç–∫–∞ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ
        message_id = last_message.get("id")
        text = last_message.get("text")
        text += f"\n\n{YES_EMOJI}\t–î–∏–∑–∞–π–Ω"
        try:
            await callback.message.bot.edit_message_text(text=text, chat_id=callback.message.chat.id,
                                                         message_id=message_id, reply_markup=None,
                                                         parse_mode=ParseMode.HTML)
        except TelegramBadRequest:
            pass

    answer_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back"),
            InlineKeyboardButton(text=f"{START_EMOJI} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="START"),
        ],
    ])

    msg = "<b>üé® –°—É–ø–µ—Ä-–∫—É—Ä—Å –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤</b>\n\n–ü–æ–∫–∞ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –∫—É—Ä—Å–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!"
    answer_message = await callback.message.answer(
        msg,
        parse_mode=ParseMode.HTML,
        reply_markup=answer_keyboard,
    )
    await state.update_data(last_message={
        "id": answer_message.message_id,
        "text": msg,
        "keyboard": answer_keyboard.model_dump_json()
    })


@study_router.callback_query(MenuStates.study, F.data == "diving_details")
async def handle_diving_details(callback: CallbackQuery):
    await callback.message.edit_text(
        "<b>ü§ø –í–æ–¥–æ–ª–∞–∑–Ω–æ–µ –¥–µ–ª–æ</b>\n\n–ü–æ–∫–∞ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –∫—É—Ä—Å–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!",
        parse_mode=ParseMode.HTML,
    )
    await callback.answer()


@study_router.callback_query(F.data == "study")
async def handle_go_back(callback: CallbackQuery):
    await callback.message.edit_text(
        "<b>‚¨ÖÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥</b>\n\n–ü–æ–∫–∞ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞. –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
        parse_mode=ParseMode.HTML,
    )
    await callback.answer()


@study_router.callback_query(F.data == "contact_us")
async def handle_contact_us(callback: CallbackQuery):
    await callback.message.edit_text(
        "<b>üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏</b>\n\n–ü–æ–∫–∞ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞. –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –∫–æ–Ω—Ç–∞–∫—Ç—ã!",
        parse_mode=ParseMode.HTML,
    )
    await callback.answer()
