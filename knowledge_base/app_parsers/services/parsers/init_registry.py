import os
import importlib
import pkgutil
import logging

from app_parsers.services.parsers.registry import register_parser, BaseWebParser

logger = logging.getLogger(__name__)


def initialize_parser_registry():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–µ—Å—Ç—Ä –ø–∞—Ä—Å–µ—Ä–æ–≤, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—è
    –≤—Å–µ –∫–ª–∞—Å—Å—ã-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏ BaseWebParser, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –ø–∞–ø–∫–µ parser_classes.

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∫–∞–∫ Django, —Ç–∞–∫ –∏ Celery,
    –ø–æ—Å–∫–æ–ª—å–∫—É AppConfig.ready() –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Celery.

    –ò—Å–∫–ª—é—á–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–∏ dev-–∑–∞–ø—É—Å–∫–µ (–µ—Å–ª–∏ RUN_MAIN != "true").

    –õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã –∏ –º–æ–¥—É–ª–∏.
    """
    if os.environ.get("RUN_MAIN") != "true":
        logger.debug("–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤: RUN_MAIN != 'true'")
        return

    parser_package = "app_parsers.services.parsers.parser_classes"
    package = importlib.import_module(parser_package)

    logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤ –∏–∑ –º–æ–¥—É–ª—è: %s", parser_package)

    for _, module_name, _ in pkgutil.iter_modules(package.__path__):
        full_module_name = f"{parser_package}.{module_name}"
        try:
            module = importlib.import_module(full_module_name)
            logger.debug("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –º–æ–¥—É–ª—å –ø–∞—Ä—Å–µ—Ä–∞: %s", full_module_name)
        except Exception as e:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å %s: %s", full_module_name, str(e))
            continue

        for attr in dir(module):
            obj = getattr(module, attr)
            if (
                isinstance(obj, type)
                and issubclass(obj, BaseWebParser)
                and obj is not BaseWebParser
            ):
                try:
                    register_parser(obj)
                    logger.info("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–∞—Ä—Å–µ—Ä: %s.%s", full_module_name, obj.__name__)
                except Exception as e:
                    logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ %s: %s", obj.__name__, str(e))
